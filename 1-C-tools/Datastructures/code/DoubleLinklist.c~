#include<stdio.h>
#include<malloc.h>

struct node
{
	int data;
	struct node *next;
	struct node *pre; 
};
typedef struct node node;

node *first,*new,*curr,*temp,*temp1,*raw,*ins,*del,*rev;

/*********************************************************************************
		List of Variables
**********************************************************************************/
int TotalLoopCount = 0;

/*********************************************************************************
		List of Functions
**********************************************************************************/
void InsertNode(void);
void DeleteNode(void);
void SortLinkList(void);	
void LookForNode(void);
void FindMinNode(void);
void FindMaxNode(void);
void AlterNodeValue(void);
void EnterTheNodes(void);
void ReverseLinkList(void);
void CheckSameNodes(void);


/*********************************************************************************			
/*********************************************************************************
 * *******************************************************************************
 * Main Function
 * *******************************************************************************		
**********************************************************************************/
int main()
{
	EnterTheNodes();	
	ReverseLinkList();
	return;
	CheckSameNodes();
	LookForNode();
	FindMaxNode();
	FindMinNode();
	SortLinkList();	
	InsertNode();
	DeleteNode();
	AlterNodeValue();
	ReverseLinkList();
}

/*********************************************************************************			
/*********************************************************************************
 * *******************************************************************************
 * This below function Create the link list
 * *******************************************************************************		
**********************************************************************************/

void EnterTheNodes(void)
{
	int ContiueLoop = 0;
	
	do
	{
		printf("Enter the node value\n");
		new = malloc(sizeof(node));
		scanf("%d",&new->data);
		
		new->pre =0;
		new->next= 0;
			
		if(first == 0)
		{
			first = curr = new;
			TotalLoopCount++;
		}
		else
		{
			curr->next = new;
			new->pre = curr;
			curr = new;
			TotalLoopCount++;
		}
		printf("do u want to continue\n");
		scanf("%d",&ContiueLoop);
	}while(ContiueLoop);

	printf("The nodes entered by user\n");
	curr =  first;
	while(curr != 0)
	{
		printf("%d\n",curr->data);
		curr = curr->next;
	}
}

/*********************************************************************************			
/*********************************************************************************
 * *******************************************************************************
 * This below function checks the same nodes in link list
 * *******************************************************************************		
**********************************************************************************/

void CheckSameNodes(void)
{		
	int CmpValue = 0,CmpCount = 1;
	int NodeMatch = 0,LoopCount = 0;

	printf("*********************************************************************\n\n");	
	printf("Check the  same node Present in link list\n");	
	printf("The Total no of nodes %d \n",TotalLoopCount);

	while(CmpCount < TotalLoopCount)
	{
		printf("Comparison started \n");		
		curr = first;
		LoopCount = CmpCount;
	
		while(LoopCount)
		{
			CmpValue = curr->data;
			curr = curr->next;
			LoopCount--;
		}
		
		printf("The Final Comparitive Element %d \n",	CmpValue);
		
		while(curr != NULL)
		{			
			if(CmpValue == curr->data)
			{
				printf("The Matching with this node  %d\n" , curr->data);
				NodeMatch = 1;
			}
			curr = curr->next;	
		}	

		CmpCount++;
		printf("\n");
	}	

	if(NodeMatch!=0){
		printf("Node are Matching\n ");
	}
	printf("*********************************************************************\n\n");	
}

/*********************************************************************************
 * *******************************************************************************
 * Look for any node in link list
 * *******************************************************************************		
**********************************************************************************/
void LookForNode(void)
{	
	int CheckNode = 0,i=0;
	
	printf("*********************************************************************\n\n");	
	printf("Check and Comapre Node Value\n");
	scanf("%d",&CheckNode);
	curr = first;		
		
	for(i=0; i<TotalLoopCount; i++)
	{
		if(CheckNode == curr->data)
		{
			printf("The entered node is present\n");	
			return;
		}
		else
		{
			curr = curr->next;		
		}
	}	
	printf("Sorry This node %d is not present\n",CheckNode);
	printf("*********************************************************************\n\n");	
}


/*********************************************************************************
 * *******************************************************************************
 * This function finds the maximum node value
 * *******************************************************************************		
**********************************************************************************/

void FindMaxNode(void)
{
	int i = 0;
	int lowest  = 0;	
	
	printf("*********************************************************************\n\n");	
	curr = first;
	lowest = curr->data;
	for(i=0;i<TotalLoopCount-1;i++)
	{
		curr = curr->next;
		if(lowest >curr->data)
			lowest = curr->data;
	}
	printf("The lowest node is = %d\n",lowest);
	printf("*********************************************************************\n\n");	
}


/*********************************************************************************
 * *******************************************************************************
 * This function finds the minimum node value
 * *******************************************************************************		
**********************************************************************************/

void FindMinNode(void)
{
	int i = 0;
	int highest  = 0;	
	
	printf("*********************************************************************\n\n");	
	curr = first;
	highest = curr->data;
	for(i=0;i<TotalLoopCount-1;i++)
	{
		curr = curr->next;
		if(highest < curr->data)
			highest = curr->data;
	}
	printf("The highest node is = %d \n",highest);
	printf("*********************************************************************\n\n");			
}


/*********************************************************************************
 * *******************************************************************************
 * This function sort the link list in ascending order
 * *******************************************************************************		
**********************************************************************************/
void SortLinkList(void)
{	
	for(temp = first; temp != 0; temp=temp->next)
	{
		for(temp1 = first; temp1!=0; temp1=temp1->next)
		{
			if(temp->data > temp1->data)
			{
				raw = temp->data;
				temp->data = temp1->data;
				temp1->data = raw;
				 
			}
		}		
	}
	
	printf("*********************************************************************\n\n");	
	printf("After sorting of link list\n");
	curr = first;
	while(curr!=0)
	{
		printf("%d\n",curr->data);
		curr = curr->next;
	}
	printf("*********************************************************************\n\n");	
}


/*********************************************************************************
 * *******************************************************************************
 * This function insert the node 
 * *******************************************************************************		
**********************************************************************************/
	
void InsertNode(void)
{
	int InsNode = 1;
	int NodePos = 0;
	int i = 0,ddd = 0;

	printf("*********************************************************************\n\n");	
	
	while(InsNode)
	{
		printf("\nEnter 1 if u wana to insert the node\n");
		scanf("%d",&InsNode);
		
		if(InsNode != 0)
		{
			printf("The maximum number of nodes = %d\n",TotalLoopCount);
			printf("Enter the postion of node\n");
			scanf("%d",&NodePos);
			
			ins = malloc(sizeof(node));
			printf("Enter the value of new node \n");
			scanf("%d",&ins->data);
			
			curr = first;
				
			if(NodePos == 1)
			{
				printf("Node position is 1 \n");
				first = ins;
				first->pre = 0;
				first->next = curr;
				curr->pre = ins;
			}
			else 
			{
				for(i=1;i<NodePos-1;i++)
				{
					curr = curr->next;
				}
				if(curr->next == 0)//(NodePos == TotalLoopCount)
				{
					printf("Node position is Last \n");
					curr->next = ins;
					ins->pre = curr;
					ins->next = 0;			
				}	
				else
				{
					printf("Node position is mid \n");			
					ins->pre  = curr;
					ins->next = curr->next;
					curr->next = ins;
					(curr->next)->pre = ins; 
				}	
			}
			
			printf("After the insertion\n");		
		
			curr = first;
			TotalLoopCount++;
			
			while(curr!=0)
			{
				printf("%d \n",curr->data);
				curr =curr->next;
			}
		}	
	}
	printf("*********************************************************************\n\n");	
}


/*********************************************************************************
 * *******************************************************************************
 * This function delete the node 
 * *******************************************************************************		
**********************************************************************************/
void DeleteNode(void)
{
	int i = 0;
	int Del = 0,DelPos = 0;

	printf("*********************************************************************\n\n");	
	printf("The total no of new nodes is %d\n",TotalLoopCount);
	printf("Enter 1 if u want to delete the node\n");
	scanf("%d",&Del);
	
	if(Del)
	{
		curr = first;
		printf("Enter the postion to delete the node\n");
		scanf("%d",&DelPos);
		
		for(i=1;i<DelPos;i++)
		{
			curr = curr->next;
		}
		
		if(DelPos == 0)
		{
			first = curr->next;
			
		}
		else
		{
			if(curr->next->next == 0)
			{
				curr->next = 0;
			}
			else
			{
				curr->next = curr->next->next; 
				curr->next->pre = curr;
			}
		}	
		printf("After the deleting mode \n");
		
		curr = first;
		TotalLoopCount--;
		
		while(curr!=0)
		{
			printf("%d\n",curr->data);
			curr = curr->next;
		}
	}
	printf("*********************************************************************\n\n");	
}

/*********************************************************************************
 * *******************************************************************************
 * This function change the node value
 * *******************************************************************************		
**********************************************************************************/

void AlterNodeValue(void)
{
	int i = 0;
	int NodPos = 0;
	
	printf("*********************************************************************\n\n");	
	printf("Alter the Node in  the Link List\n");

	printf("Enter the location where u want to change the value\n");
	scanf("%d",&NodPos);
	curr = first;
	for(i=0;i<NodPos;i++)
	{
		curr = curr->next;
	}
	printf("Enter the node value to change\n");
	scanf("%d",&curr->data);
	curr = first;
	while(curr!=0)
	{
		printf("%d\n",curr->data);
		curr = curr->next;
	}
	printf("*********************************************************************\n\n");	
}

/*********************************************************************************
 * *******************************************************************************
 * This function reverse the link list
 * *******************************************************************************		
**********************************************************************************/
void ReverseLinkList(void)
{
	int ee = 0;
	printf("*********************************************************************\n\n");	
	printf("Reverse the Link List\n");

	curr = first;
	while(curr->next !=0 )
	{
		curr = curr->next;
	}

	while(curr)
	{
		printf("I am in rev \n");
		rev = curr->pre;
		curr->pre = curr->next;
		curr->next = rev;

		if(curr->pre != NULL)
			curr = curr->pre;
		else
			break;
	}
	scanf("%d",&ee);
	curr = first;
	while(curr!=0)
	{
		printf("%d\n",curr->data);
		curr = curr->next;
	}
	printf("*********************************************************************\n\n");	

}



